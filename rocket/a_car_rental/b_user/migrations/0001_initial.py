# Generated by Django 3.2.7 on 2021-09-08 09:44

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, db_column='id', primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(db_column='email', max_length=254, unique=True, verbose_name='Email')),
                ('password', models.CharField(db_column='password', max_length=128, validators=[django.core.validators.MinLengthValidator(4)], verbose_name='Password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(db_column='date_joined', default=django.utils.timezone.now, verbose_name='date joined')),
                ('last_name', models.CharField(db_column='last_name', max_length=60, validators=[django.core.validators.RegexValidator('^[a-zA-Zа-яА-Я]*$', 'Only alpha characters are allowed.')], verbose_name='Last name')),
                ('first_name', models.CharField(db_column='first_name', max_length=60, validators=[django.core.validators.RegexValidator('^[a-zA-Zа-яА-Я]*$', 'Only alpha characters are allowed.')], verbose_name='First name')),
                ('patronymic', models.CharField(blank=True, db_column='patronymic', max_length=60, null=True, validators=[django.core.validators.RegexValidator('^[a-zA-Zа-яА-Я]*$', 'Only alpha characters are allowed.')], verbose_name='Patronymic')),
                ('date_of_birth', models.DateField(db_column='date_of_birth', verbose_name='Date of birth')),
                ('gender', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female'), ('Other', 'Other')], db_column='gender', max_length=7, verbose_name='Gender')),
                ('phone_number', models.CharField(db_column='phone_number', max_length=12, unique=True, validators=[django.core.validators.MinLengthValidator(12), django.core.validators.RegexValidator('^[0-9+]*$', 'Only numeric characters are allowed.')], verbose_name='Phone number')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'Users',
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
